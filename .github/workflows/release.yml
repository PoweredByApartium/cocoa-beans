# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Release

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Version name'
        required: true
        type: string

permissions:
  pull-requests: write
  contents: write
  repository-projects: write
  packages: write
  pages: write
  id-token: write

env:
  INSTANCE: 'Writerside/cb'
  ARTIFACT: 'webHelpHI2-all.zip'
  DOCKER_VERSION: '233.14938'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  tests:
    uses: PoweredByApartium/cocoa-beans/.github/workflows/callable.test.yml@release-ci

  setup:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: true
          ref: release-ci
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
      
      - name: Determine version changes
        id: determine_version
        run: |
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          INPUT_VERSION=${{ github.event.inputs.name }}
          
          echo "version_change=$([ "$CURRENT_VERSION" != "$INPUT_VERSION" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          # Determine if it's a major version change
          IFS='.' read -ra CURRENT <<< "$CURRENT_VERSION"
          IFS='.' read -ra INPUT <<< "$INPUT_VERSION"
          
          echo "::set-output name=major_version_change::$([[ "${CURRENT[1]}" != "${INPUT[1]}" ]] && echo true || echo false)"

      - name: Prepare directories
        if: steps.determine_version.outputs.major_version_change == 'true'
        run: |
          if [ -d "docs" ]; then
            PREVIOUS_VERSION=$(git describe --tags --abbrev=0)
            echo "Creating old version directory for version $PREVIOUS_VERSION"
            git fetch origin
            git checkout gh-pages
            mkdir -p "docs_$PREVIOUS_VERSION"
            cp -r docs/* "docs_$PREVIOUS_VERSION"

            git add .
            git rm -rf docs/
            git commit -m "Creating old version directory"
            git push origin gh-pages
          fi

  publish:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: true
          ref: release-ci
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git
        run: |
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"

      - name: Create Tag
        id: create_tag
        run: |
          TAG_VERSION=${{ github.event.inputs.name }}
          git tag $TAG_VERSION
          git push origin $TAG_VERSION
      
      - name: Update Gradle Version
        run: |
            git pull origin release-ci
            new_version=${{ github.event.inputs.name }}
            gradle_properties="gradle.properties"
            sed -i "s/^project.version=.*/project.version=$new_version/" $gradle_properties
              echo "Updated project.version to $new_version"
              git add gradle.properties
              git commit -m "Update project version to ${{ github.event.inputs.name }}"
              git push origin release-ci
      
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Publish to maven repository
        run: ./gradlew publishPluginPublicationToHangar publish
        env:
          HANGAR_TOKEN: ${{ secrets.HANGAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APARTIUM_NEXUS_PASSWORD: ${{ secrets.APARTIUM_NEXUS_PASSWORD }}
          APARTIUM_NEXUS_USERNAME: ${{ secrets.APARTIUM_NEXUS_USERNAME }}
      - name: Build Writerside docs using Docker
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}  

      - name: Generate docs folder
        run: sh build-scripts/prepare-web-output.sh 
  
      - name: Update documentation
        if: needs.setup.determine_version.outputs.* == 'true'
        run: |
          echo "Updating documentation for version ${{ github.event.inputs.name }}"
          git fetch origin
          git checkout -b gh-pages origin/gh-pages || git checkout -b gh-pages
          git pull origin gh-pages || true
          git add docs/
          git commit -m "Update docs in github pages branch" || echo "No changes to commit"
          git push origin gh-pages
  
  ghRelease:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: artifacts
          path: "**/build/libs/*.jar"
      - name: Create a release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.name }}
          files: |
            plugin/build/libs/*.jar
            LICENSE.md

  changelog:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Run Changelog CI
        uses: saadmk11/changelog-ci@v1.1.2
        with:
          release_version: ${{ github.event.inputs.name }}
